/*********************
 *     Grant Heath
 *     Student ID: 100925634
 *     Date Completed: 2025-03-22
 *
 *     Volunteer Connect Project
 *     statistics.ts
 *
 *     Graph for statistics gets data from chartData.json and puts it into a
 *     bar graph, some graph visuals are generated by Co-Pilot.
 *
 *      the graph is made using chart.js
 *********************/
"use strict";

// Declare Chart globally since it's provided by the CDN link
declare const Chart: any;

console.log("[INFO] Entering statistics.ts");

export function statisticsLogic(): void {
    console.log("[DEBUG] statisticsLogic() is running!");

    // Get the canvas element with type annotation
    const canvas = document.getElementById("chart") as HTMLCanvasElement | null;
    if (canvas) {
        console.log("[DEBUG] Canvas element found. Initializing Chart.js...");
    } else {
        console.error("[ERROR] Canvas element not found. Ensure statistics.html is loaded properly.");
        return;
    }

    fetch('data/chartData.json')
        .then(response => {
            if (!response.ok) {
                throw new Error(`[ERROR] Failed to fetch JSON data: ${response.statusText}`);
            }
            return response.json();
        })
        .then(jsonData => {
            console.log("[DEBUG] JSON data loaded:", jsonData);

            // Chart.js configuration with fetched data
            //background colors and formatting is generated by Microsoft CoPilot

            const config: any = {
                type: 'bar',
                data: {
                    labels: jsonData.labels, // Use labels from JSON
                    datasets: [{
                        label: 'Monthly Visitors',
                        data: jsonData.data,
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.2)',  //graph 1
                            'rgba(54, 162, 235, 0.2)',  //graph 2
                            'rgba(255, 206, 86, 0.2)',  //graph 3
                            'rgba(75, 192, 192, 0.2)',  //graph 4
                            'rgba(153, 102, 255, 0.2)'  //graph 5
                        ],
                        //black backgrounds
                        borderColor: [
                            'rgba(0, 0, 0, 0.2)',  //graph 1
                            'rgba(0, 0, 0, 0.2)',  //graph 2
                            'rgba(0, 0, 0, 0.2)',  //graph 3
                            'rgba(0, 0, 0, 0.2)',  //graph 4
                            'rgba(0, 0, 0, 0.2)',  //graph 5
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            };

            // Get 2D rendering context from the canvas
            const twoDContext = canvas.getContext("2d");
            if (!twoDContext) {
                console.error("[ERROR] Failed to get 2D context. Chart rendering aborted.");
                return;
            }

            // Render the chart using Chart.js
            const chart = new Chart(twoDContext, config); // Use the global Chart object
            console.log("[DEBUG] Chart instance created:", chart);
        })
        .catch(error => {
            console.error("[ERROR] An error occurred while fetching JSON data:", error);
        });
}